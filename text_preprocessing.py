# Clean and tokenize questions

import re
import nltk

nltk.download('punkt')
from nltk.tokenize import word_tokenize
import pickle
import logging
from string import punctuation
from symspellpy import SymSpell, Verbosity
import pkg_resources
import gensim
import pandas as pd


def clean_data(raw_data):
    filtered_sentences = []
    for question in raw_data:
        logging.info("Cleaning --> %s ", question)
        question = re.sub("\'s", " ", question)
        question = re.sub("[c-fC-F]:/", " disk ", question)
        question = re.sub(r"quikly", "quickly", question)
        question = re.sub(r" (the[\s]+|The[\s]+)?US(A)? ", " America ", question)
        question = re.sub(r" UK ", " England ", question, flags=re.IGNORECASE)
        question = re.sub(r"india", "India", question)
        question = re.sub(r" switzerland ", " Switzerland ", question)
        question = re.sub(r" narcissic ", " narcissistic ", question)
        question = re.sub(r" exstensive ", " extensive ", question)
        question = re.sub(r" mypassport ", " my passport ", question)
        question = re.sub(r" airbar ", " airbag ", question)
        question = re.sub(r" retailnext ", " retail next ", question)
        question = re.sub(r" folllow ", " follow ", question)
        question = re.sub(r" switchoff ", " switch-off ", question)
        question = re.sub(r" negetive ", " negative ", question)
        question = re.sub(r" converaion ", " conversion ", question)
        question = re.sub(r" moderniization ", " modernization ", question)
        question = re.sub(r" system…i ", " system I ", question)
        question = re.sub(r" interveiw ", " interview ", question)
        question = re.sub(r" throwns ", " thrown ", question)
        question = re.sub(r" beaufiful ", " beautiful ", question)
        question = re.sub(r" underoing ", " undergoing ", question)
        question = re.sub(r" forgivness ", " forgiveness ", question)
        question = re.sub(r" inreal ", " unreal ", question)
        question = re.sub(r" industry…what ", " industry what ", question)
        question = re.sub(r" minimums ", " minimum ", question)
        question = re.sub(r" whst ", " what ", question)
        question = re.sub(r" hursband ", " husband ", question)
        question = re.sub(r" democratised ", " democratize ", question)
        question = re.sub(r" photographyy ", " photography ", question)
        question = re.sub(r" averag ", " average ", question)
        question = re.sub(r" corresspondence ", " correspondence ", question)
        question = re.sub(r" constructlively ", " constructively ", question)
        question = re.sub(r" fewmonths ", " few months ", question)
        question = re.sub(r" youtuve ", " youtube ", question)
        question = re.sub(r" multithreaded ", " multi-threaded ", question)
        question = re.sub(r" deathlyhallows ", " deathly hallows ", question)
        question = re.sub(r" occuied ", " occupied ", question)
        question = re.sub(r" precice ", " precise ", question)
        question = re.sub(r" joininy ", " joining ", question)
        question = re.sub(r" cigarrates ", " cigarettes ", question)
        question = re.sub(r" developoing ", " developing ", question)
        question = re.sub(r" handwrite ", " handwritten ", question)
        question = re.sub(r" addidas ", " adidas ", question)
        question = re.sub(r" guage ", " gauge ", question)
        question = re.sub(r" archiver ", " archive ", question)
        question = re.sub(r" opinoin ", " opinion ", question)
        question = re.sub(r" funtionality ", " functionality ", question)
        question = re.sub(r" physicits ", " physicists ", question)
        question = re.sub(r" made？ ", " made ", question)
        question = re.sub(r" handlebreakup ", " handle breakup ", question)
        question = re.sub(r" offereing ", " offering ", question)
        question = re.sub(r" possesion ", " possession ", question)
        question = re.sub(r" ，muslems ", " muslims ", question)
        question = re.sub(r" ，servics ", " services ", question)
        question = re.sub(r" ，repsonse ", " response ", question)
        question = re.sub(r" ，universa ", " universe ", question)
        question = re.sub(r" ，holocast ", " holocaust ", question)
        question = re.sub(r" ，unsuccesfull ", " unsuccesful ", question)
        question = re.sub(r" ，underated ", " underrated ", question)
        question = re.sub(r" ，intitution ", " institution ", question)
        question = re.sub(r" ，diificult ", " difficult ", question)
        question = re.sub(r" ，cartiff ", " Cardiff ", question)
        question = re.sub(r" ，buissness ", " business ", question)
        question = re.sub(r" ，photogtaphs ", " photographs ", question)
        question = re.sub(r" ，consequenses ", " consequences ", question)
        question = re.sub(r" ，stoled ", " stole ", question)
        question = re.sub(r" ，corporative ", " cooperative ", question)
        question = re.sub(r" ，mirrorles ", " mirrorless ", question)
        question = re.sub(r" ，overide ", " override ", question)
        question = re.sub(r" ，speakeasy ", " speak easy ", question)
        question = re.sub(r" ，fourfourtwo ", " four four two ", question)
        question = re.sub(r" ，canditates ", " candidates ", question)
        question = re.sub(r" ，prepartion ", " preparation ", question)
        question = re.sub(r" ，plaement ", " placement ", question)
        question = re.sub(r" ，folllow ", " follow ", question)
        question = re.sub(r" ，masterbates ", " masturbates ", question)
        question = re.sub(r" ，noticible ", " noticeable ", question)
        question = re.sub(r" ，comleted ", " completed ", question)
        question = re.sub(r" ，priod ", " period ", question)
        question = re.sub(r" ，decieved ", " deceived ", question)
        question = re.sub(r" ，dolar ", " dollar ", question)
        question = re.sub(r" ，moderniization ", " modernization ", question)
        question = re.sub(r" ，forgivness ", " forgiveness ", question)
        question = re.sub(r" ，dissapoint ", " disapoint ", question)
        question = re.sub(r" ，again…could ", " again could ", question)
        question = re.sub(r" ，neccessary ", " neccessary ", question)
        question = re.sub(r" ，possible… ", " possible ", question)

        question = re.sub(r" day？ ", " day ", question)
        question = re.sub(r" peple ", " people ", question)
        question = re.sub(r" knowwhen ", " know when ", question)
        question = re.sub(r" try to ", " try to ", question)
        question = re.sub(r" theretell ", " there tell ", question)
        question = re.sub(r" academey ", " academy ", question)
        question = re.sub(r" transferd ", " transferred ", question)
        question = re.sub(r" protuguese ", " portuguese ", question)
        question = re.sub(r" committe ", " committee ", question)
        question = re.sub(r" studentsneed ", " students need ", question)
        question = re.sub(r" coutry ", " country ", question)
        question = re.sub(r" examcollection ", " exam collection ", question)
        question = re.sub(r" elligibility ", " eligibility ", question)
        question = re.sub(r" completting ", " completing ", question)
        question = re.sub(r" aplartments ", " apartments ", question)
        question = re.sub(r" maintenanes ", " maintenance ", question)
        question = re.sub(r" temprture ", " temperature ", question)
        question = re.sub(r" excalmation ", " exclamation ", question)
        question = re.sub(r" viberation ", " vibration ", question)
        question = re.sub(r" …my ", " my ", question)
        question = re.sub(r" algorithems ", " algorithms ", question)
        question = re.sub(r" counciousness ", " consciousness ", question)
        question = re.sub(r" thepoint ", " the point ", question)
        question = re.sub(r" particlular ", " particular ", question)
        question = re.sub(r" together… ", " together ", question)
        question = re.sub(r" celebrate ", " celebrate ", question)
        question = re.sub(r" boyfriend… ", " boyfriend ", question)
        question = re.sub(r" now…what ", " now what ", question)
        question = re.sub(r" heavyduty ", " heavy duty ", question)
        question = re.sub(r" indirectaly ", " indirectly ", question)
        question = re.sub(r" morguage ", " mortgage ", question)
        question = re.sub(r" nspire ", " inspire ", question)
        question = re.sub(r" therichest ", " the richest ", question)
        question = re.sub(r" lengh ", " length ", question)
        question = re.sub(r" wellrounded ", " well rounded ", question)
        question = re.sub(r" manuever ", " maneuver ", question)
        question = re.sub(r" allignment ", " alignment ", question)
        question = re.sub(r" intution ", " intuition ", question)

        question = re.sub(r" sandard ", " standard ", question)
        question = re.sub(r" timesjob ", " times job ", question)
        question = re.sub(r" requirea ", " required ", question)
        question = re.sub(r" educacion ", " education ", question)
        question = re.sub(r" birthdates ", " birth dates ", question)
        question = re.sub(r" ronweasely ", " Ron Weasely ", question)
        question = re.sub(r" harrypotter ", " Harry Potter ", question)
        question = re.sub(r" seriesof ", " series of ", question)
        question = re.sub(r" properity ", " prosperity ", question)
        question = re.sub(r" gravitationly ", " gravitation ", question)
        question = re.sub(r" aerospaces ", " aerospace ", question)
        question = re.sub(r" oberving ", " observing ", question)
        question = re.sub(r" prevoius ", " previous ", question)
        question = re.sub(r" identity… ", " identity ", question)
        question = re.sub(r" trainne ", " trainee ", question)
        question = re.sub(r" basterds ", " bastards ", question)
        question = re.sub(r" a…circuit ", " a circuit ", question)
        question = re.sub(r" girls… ", " girls ", question)
        question = re.sub(r" boys… ", " boys ", question)
        question = re.sub(r" intead ", " instead ", question)
        question = re.sub(r" china ", " China ", question)
        question = re.sub(r" resercher ", " researcher ", question)
        question = re.sub(r" sftudents ", " students ", question)
        question = re.sub(r" municiple ", " municipal ", question)
        question = re.sub(r" totake ", " to take ", question)
        question = re.sub(r" scholarsip ", " scholarship ", question)
        question = re.sub(r" benefots ", " benefits ", question)
        question = re.sub(r" israil ", " Israel ", question)
        question = re.sub(r" gorialla ", " gorilla ", question)
        question = re.sub(r" priorties ", " priorities ", question)
        question = re.sub(r" 4shared ", " shared ", question)
        question = re.sub(r" apporach ", " approach ", question)
        question = re.sub(r" galxy ", " galaxy ", question)
        question = re.sub(r" allowd ", " allowed ", question)
        question = re.sub(r" bleeded ", " bled ", question)
        question = re.sub(r" 5ton ", " 5 ton ", question)
        question = re.sub(r" sratch ", " scratch ", question)
        question = re.sub(r" relevence ", " relevance ", question)
        question = re.sub(r" postion ", " position ", question)
        question = re.sub(r" moblie ", " mobile ", question)
        question = re.sub(r" niether ", " neither ", question)
        question = re.sub(r" worldpay ", " word play ", question)
        question = re.sub(r" councelling ", " counselling ", question)
        question = re.sub(r" choose… ", " choose ", question)
        question = re.sub(r" accoustic ", " acoustic ", question)
        question = re.sub(r" 3hours ", " 3 hours ", question)
        question = re.sub(r" excaliber ", " excalibur ", question)
        question = re.sub(r" priciple ", " principle ", question)
        question = re.sub(r" loopsone ", " loops one ", question)
        question = re.sub(r" benefital ", " beneficial ", question)
        question = re.sub(r" notbelieve ", " not believe ", question)
        question = re.sub(r" freshier ", " fresher ", question)
        question = re.sub(r" nextlaw ", " next law ", question)
        question = re.sub(r" interpet ", " interpret ", question)
        question = re.sub(r" earing ", " earring ", question)
        question = re.sub(r" oppertunity ", " opportunity ", question)
        question = re.sub(r" chemistry…what ", " chemistry what ", question)
        question = re.sub(r" containg ", " containing ", question)
        question = re.sub(r" amazinggirl ", " amazing girl ", question)
        question = re.sub(r" hauntingme ", " haunting me ", question)
        question = re.sub(r" excerted ", " exerted ", question)
        question = re.sub(r" reporductive ", " reproductive ", question)
        question = re.sub(r" whatshould ", " what should ", question)
        question = re.sub(r" verififcation ", " verification ", question)
        question = re.sub(r" declartion ", " declaration ", question)
        question = re.sub(r" reuired ", " required ", question)
        question = re.sub(r" substitue ", " substitute ", question)
        question = re.sub(r" strucure ", " structure ", question)
        question = re.sub(r" crowdresourcing ", " crowdsourcing ", question)
        question = re.sub(r" integra ", " integral ", question)
        question = re.sub(r" improveloading ", " improve loading ", question)
        question = re.sub(r" placemens ", " placement ", question)
        question = re.sub(r" apostol ", " apostle ", question)
        question = re.sub(r" pinpinterest ", " pintrest ", question)
        question = re.sub(r" tommorrow ", " tomorrow ", question)
        question = re.sub(r" chlidren ", " children ", question)
        question = re.sub(r" rienforced ", " reinforced ", question)
        question = re.sub(r" repetation ", " reputation ", question)
        question = re.sub(r" invisionapp ", " invision app ", question)
        question = re.sub(r" dicision ", " decision ", question)
        question = re.sub(r" 2ndchance ", " second chance ", question)
        question = re.sub(r" mirrorlesss ", " mirrorless ", question)
        question = re.sub(r" sublumation ", " sublimation ", question)
        question = re.sub(r" communucation ", " communication ", question)
        question = re.sub(r" ingineering ", " engineering ", question)
        question = re.sub(r" emotinally ", " emotionally ", question)
        question = re.sub(r" weakend ", " weekend ", question)
        question = re.sub(r" sliping ", " slipping ", question)
        question = re.sub(r" minstry ", " ministry ", question)
        question = re.sub(r" algortithm ", " algorithm ", question)
        question = re.sub(r" …please ", " please ", question)
        question = re.sub(r" paintmywall ", " paint my wall ", question)
        question = re.sub(r" boobsize ", " boob size ", question)
        question = re.sub(r" shameful… ", " shameful ", question)
        question = re.sub(r" desease ", " disease ", question)
        question = re.sub(r" itutor ", " i tutor ", question)
        question = re.sub(r" hotelling ", " hoteling ", question)
        question = re.sub(r" openfire ", " open fire ", question)
        question = re.sub(r" universirty ", " university ", question)
        question = re.sub(r" ammend ", " amend ", question)
        question = re.sub(r" isbest ", " is best ", question)
        question = re.sub(r" ispend ", " spend ", question)
        question = re.sub(r" todefence ", " to defence ", question)
        question = re.sub(r" ansewring ", " answering ", question)
        question = re.sub(r" turnoff ", " turn off ", question)
        question = re.sub(r" lightfield ", " light field ", question)
        question = re.sub(r" swimmed ", " swam ", question)
        question = re.sub(r" yeilded ", " yielded ", question)
        question = re.sub(r" triune ", " tribune ", question)
        question = re.sub(r" anulled ", " annulled ", question)
        question = re.sub(r" bandaids ", " band-aids ", question)
        question = re.sub(r" verfify ", " verify ", question)
        question = re.sub(r" trainsignal ", " train signal ", question)
        question = re.sub(r" anybodt ", " anybody ", question)
        question = re.sub(r" alwys ", " always ", question)
        question = re.sub(r" 23year ", " 23 year ", question)
        question = re.sub(r" deamnds ", " demands ", question)
        question = re.sub(r" brainmeasures ", " brain measures ", question)
        question = re.sub(r" that… ", " that ", question)
        question = re.sub(r" shortner ", " shortener ", question)
        question = re.sub(r" oniline ", " online ", question)
        question = re.sub(r" connectionn ", " connection ", question)
        question = re.sub(r" soonfor ", " soon for ", question)
        question = re.sub(r" sallary ", " salary ", question)
        question = re.sub(r" libertatians ", " libertarians ", question)
        question = re.sub(r" wraparound ", " wrap around ", question)
        question = re.sub(r" internetworking ", " internet working ", question)
        question = re.sub(r" panentheism ", " pantheism ", question)
        question = re.sub(r" thewebsitebaba ", " the website baba ", question)
        question = re.sub(r" vidiocall ", " videocall ", question)
        question = re.sub(r" sillicon ", " silicon ", question)
        question = re.sub(r" chararcteristics ", " characteristics ", question)
        question = re.sub(r" unncessary ", " unnecessary ", question)
        question = re.sub(r" sappoting ", " supporting ", question)
        question = re.sub(r" insititute ", " institute ", question)
        question = re.sub(r" somename ", " some name ", question)
        question = re.sub(r" somevalue ", " some value ", question)
        question = re.sub(r" counries ", " countries ", question)
        question = re.sub(r" scinentist ", " scientist ", question)
        question = re.sub(r" sequare ", " square ", question)
        question = re.sub(r" accounnting ", " accounting ", question)
        question = re.sub(r" pregenant ", " pregnant ", question)
        question = re.sub(r" chinese ", " Chinese ", question)
        question = re.sub(r"imrovement", "improvement", question)
        question = re.sub(r"intially", "initially", question)
        question = re.sub(r"quora", "Quora", question)
        question = re.sub(r" dms ", "direct messages ", question)
        question = re.sub(r"demonitization", "demonetization", question)
        question = re.sub(r"actived", "active", question)
        question = re.sub(r"60kwatt", " 60 kilowatt ", question)
        question = re.sub(r"kms", " kilometers ", question)
        question = re.sub(r"KMs", " kilometers ", question)
        question = re.sub(r" cs ", " computer science ", question)
        question = re.sub(r" upvotes ", " up votes ", question)
        question = re.sub(r" iPhone ", " phone ", question)
        question = re.sub(r"\0rs ", " rs ", question, flags=re.IGNORECASE)
        question = re.sub(r"calender", "calendar", question, flags=re.IGNORECASE)
        question = re.sub(r"ios", "operating system", question, flags=re.IGNORECASE)
        question = re.sub(r"gps", "GPS", question, flags=re.IGNORECASE)
        question = re.sub(r"gst", "GST", question, flags=re.IGNORECASE)
        question = re.sub(r"programing", "programming", question, flags=re.IGNORECASE)
        question = re.sub(r"bestfriend", "best friend", question, flags=re.IGNORECASE)
        question = re.sub(r"Astrology", "astrology", question, flags=re.IGNORECASE)
        question = re.sub(r"banglore", "Bangalore", question, flags=re.IGNORECASE)
        question = re.sub(r"dont", "do not", question, flags=re.IGNORECASE)
        question = re.sub(r" J K ", " JK ", question, flags=re.IGNORECASE)
        question = re.sub(r" math2324math ", " math ", question)
        question = re.sub('\$', " dollar ", question)
        question = re.sub('%', " percent ", question)
        question = re.sub('&', " and ", question)
        question = re.sub('fb', " facebook ", question)
        question = re.sub(" whats ", " what is ", question, flags=re.IGNORECASE)
        question = re.sub(" what's ", " what is ", question, flags=re.IGNORECASE)
        question = re.sub("\'ve", " have ", question)
        question = re.sub("can't", "can not", question)
        question = re.sub("n't", " not ", question)
        question = re.sub("i'm", "i am", question, flags=re.IGNORECASE)
        question = re.sub("\'re", " are ", question)
        question = re.sub("\'d", " would ", question)
        question = re.sub("\'ll", " will ", question)

        # replace the float numbers with a random number, it will be parsed as number afterward, and also been replaced with word "number"
        question = re.sub('[0-9]+\.[0-9]+', " 87 ", question)
        question = re.sub(r'[^\x00-\x7F]+', ' non ascii ', question)
        # indian dollar
        question = re.sub("(?<=[0-9])rs ", " rs ", question, flags=re.IGNORECASE)
        question = re.sub(" rs(?=[0-9])", " rs ", question, flags=re.IGNORECASE)

        question = ''.join([c for c in question if c not in punctuation])

        logging.info("Cleaning done --> %s ", question)
        # tokenize
        tokens = word_tokenize(str(question).lower())

        filtered_sentences.append(tokens)

    return filtered_sentences


def deep_clean_questions(c_list, model):
    sym_spell = SymSpell(max_dictionary_edit_distance=2, prefix_length=7)
    dictionary_path = pkg_resources.resource_filename(
        "symspellpy", "frequency_dictionary_en_82_765.txt")
    # term_index is the column of the term and count_index is the
    # column of the term frequency
    sym_spell.load_dictionary(dictionary_path, term_index=0, count_index=1)

    stop_words = ['to', 'and', 'of', 'but', 'an', 'a']
    social_media = ['twitter', 'instagram', 'facebook', 'quora', 'linkedin', 'evernote', 'whatsapp', 'pintrest']
    deep_cleaned_list_question = []
    for s in c_list:
        temp = s[:]
        for i, word in enumerate(s):

            if word not in model.wv.vocab and word not in stop_words and word not in social_media and not word.isdigit():
                word = sym_spell.lookup(word, Verbosity.CLOSEST, max_edit_distance=2, include_unknown=True)[0].term

                if word not in model.wv.vocab and word not in stop_words and word not in social_media:
                    result = sym_spell.word_segmentation(word)
                    words = result.corrected_string.split(' ')
                    if len(words) > 1:
                        temp[i:i] = words
                        del temp[i + len(words)]
                    else:
                        temp[i] = words[0]
                else:
                    temp[i] = word

        deep_cleaned_list_question.append(temp)
    return deep_cleaned_list_question


def clean_training_data(data):
    # Add N.A to empty strings
    print('Null values in training set')
    print(data.isnull().sum())
    data = data.fillna('N.A')
    question_list1 = data['question1'].tolist()
    question_list2 = data['question2'].tolist()

    cleaned_list_q1 = clean_data(question_list1)
    cleaned_list_q2 = clean_data(question_list2)

    pretrained_model = gensim.models.KeyedVectors.load_word2vec_format('pretrained_word_vectors/GoogleNews-vectors-negative300.bin', binary=True)
    deep_cleaned_list_question1 = deep_clean_questions(cleaned_list_q1, pretrained_model)
    deep_cleaned_list_question2 = deep_clean_questions(cleaned_list_q2, pretrained_model)

    pickle.dump(deep_cleaned_list_question1, open("deep_cleaned_list_question1.p", "wb"))
    pickle.dump(deep_cleaned_list_question2, open("deep_cleaned_list_question2.p", "wb"))

    return cleaned_list_q1, cleaned_list_q2


def get_cleaned_training_data(load_data, data):
    if load_data:
        cl1 = pickle.load(open("deep_cleaned_list_question1.p", "rb"))
        cl2 = pickle.load(open("deep_cleaned_list_question2.p", "rb"))
        return cl1, cl2
    else:
        return clean_training_data(data)


if __name__ == '__main__':

    train = pd.read_csv('data/train.csv')
    print(train.head(20))

    print('Questions 1, ', len(train['question1'].tolist()))
    print('Questions 2, ', len(train['question2'].tolist()))
    print('Duplicates, ', len(train['is_duplicate'].tolist()))
    cleaned_list_question1, cleaned_list_question2 = get_cleaned_training_data(load_data=True, data=train)
    duplicates = train['is_duplicate'].tolist()
    # View first 20 entries of cleaned data
    for q1, q2 in zip(cleaned_list_question1[:20], cleaned_list_question2[:20]):
        print(q1, q2)
